// Generated by view binder compiler. Do not edit!
package net.developermaster.kotlincanivetesuico.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.SearchView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import net.developermaster.kotlincanivetesuico.R;

public final class FragmentRecyclerviewSimplesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton fabCodigo;

  @NonNull
  public final FloatingActionButton fabXml;

  @NonNull
  public final RecyclerView idRecyclerview;

  @NonNull
  public final TextInputEditText idTextInputBusca;

  @NonNull
  public final SearchView searchView;

  @NonNull
  public final TextInputLayout textInputBuscaLayout;

  private FragmentRecyclerviewSimplesBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton fabCodigo, @NonNull FloatingActionButton fabXml,
      @NonNull RecyclerView idRecyclerview, @NonNull TextInputEditText idTextInputBusca,
      @NonNull SearchView searchView, @NonNull TextInputLayout textInputBuscaLayout) {
    this.rootView = rootView;
    this.fabCodigo = fabCodigo;
    this.fabXml = fabXml;
    this.idRecyclerview = idRecyclerview;
    this.idTextInputBusca = idTextInputBusca;
    this.searchView = searchView;
    this.textInputBuscaLayout = textInputBuscaLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRecyclerviewSimplesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRecyclerviewSimplesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_recyclerview_simples, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRecyclerviewSimplesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fabCodigo;
      FloatingActionButton fabCodigo = ViewBindings.findChildViewById(rootView, id);
      if (fabCodigo == null) {
        break missingId;
      }

      id = R.id.fabXml;
      FloatingActionButton fabXml = ViewBindings.findChildViewById(rootView, id);
      if (fabXml == null) {
        break missingId;
      }

      id = R.id.id_recyclerview;
      RecyclerView idRecyclerview = ViewBindings.findChildViewById(rootView, id);
      if (idRecyclerview == null) {
        break missingId;
      }

      id = R.id.id_TextInput_busca;
      TextInputEditText idTextInputBusca = ViewBindings.findChildViewById(rootView, id);
      if (idTextInputBusca == null) {
        break missingId;
      }

      id = R.id.searchView;
      SearchView searchView = ViewBindings.findChildViewById(rootView, id);
      if (searchView == null) {
        break missingId;
      }

      id = R.id.textInput_busca_layout;
      TextInputLayout textInputBuscaLayout = ViewBindings.findChildViewById(rootView, id);
      if (textInputBuscaLayout == null) {
        break missingId;
      }

      return new FragmentRecyclerviewSimplesBinding((ConstraintLayout) rootView, fabCodigo, fabXml,
          idRecyclerview, idTextInputBusca, searchView, textInputBuscaLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
