// Generated by Dagger (https://dagger.dev).
package net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.classeDeAplicacao;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.IdentifierNameString;
import dagger.internal.KeepFieldType;
import dagger.internal.LazyClassKeyMap;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Map;
import java.util.Set;
import net.developermaster.kotlincanivetesuico.MainActivity;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.data.remoto.InterfaceDomainDummyProdutos;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.domain.UseCase.GetUseCaseDomainDummyProdutos;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.domain.repositoryDomain.RepositorioDummyDomain;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.view.FragmentHiltDummyProdutos;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.viewModel.ViewModelDomainProdutos;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.viewModel.ViewModelDomainProdutos_HiltModules;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.data.remoto.InterfaceDomainDummyUsuarios;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.domain.repository.RepositorioDummyUsuarios;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.domain.useCase.GetUseCaseDomainApiDummy_Usuarios;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.view.FragmentHiltDummyUsuarios;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.viewModel.ViewModelDomainUsuarios;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.viewModel.ViewModelDomainUsuarios_HiltModules;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltDependenciasNomeadas.classes.Banda;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltDependenciasNomeadas.classes.Musico;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltDependenciasNomeadas.view.FragmentHiltDependenciasNomeadas;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltDependenciasNomeadas.view.FragmentHiltDependenciasNomeadas_MembersInjector;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltInjecao.classes.CarroComConstrutor;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltInjecao.view.FragmentHiltInjecao;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltInjecao.view.FragmentHiltInjecao_MembersInjector;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltSimples.classes.ClasseImplementacaoHiltSimples;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltSimples.classes.ClasseSendoInjetada;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltSimples.view.FragmentHiltSimples;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltSimples.view.FragmentHiltSimples_MembersInjector;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverInterfaceApiDummyProdutosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverInterfaceApiDummyUsuariosComposeFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverInterfaceApiDummyUsuariosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverInterfaceRepositoryDomainApiDummyProdutosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverInterfaceRepositoryDomainApiDummy_UsuariosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverRepositoryApiDummyUsuariosComposeFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverRetrofitDummyFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverUseCaseDomainApiDummyProdutosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloApi_ProverUseCaseDomainApiDummyUsuariosFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveBateriaFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveCarroComConstrutorFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveCarroSemConstrutorFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveGuitarraFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveMotorHybridoFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveMusicoFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloCarro_ProveViolaoFactory;
import net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.modulosHilt.ModuloInstrumentos_ProverBandaFactory;
import net.developermaster.kotlincanivetesuico.ui.compose.View.ScaffoldMVVM.data.Repository.RepositoryComposeMvvm;
import net.developermaster.kotlincanivetesuico.ui.compose.View.ScaffoldMVVM.data.remote.InterfaceComposeDummyApi;
import net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.view.ScaffoldMVVM;
import net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.viewmodel.ViewModelComposeMvvm;
import net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.viewmodel.ViewModelComposeMvvm_HiltModules;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerClasseDeAplicacao_HiltComponents_SingletonC {
  private DaggerClasseDeAplicacao_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public ClasseDeAplicacao_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements ClasseDeAplicacao_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements ClasseDeAplicacao_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements ClasseDeAplicacao_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements ClasseDeAplicacao_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements ClasseDeAplicacao_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements ClasseDeAplicacao_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements ClasseDeAplicacao_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public ClasseDeAplicacao_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends ClasseDeAplicacao_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends ClasseDeAplicacao_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    private Musico musico() {
      return ModuloCarro_ProveMusicoFactory.proveMusico(ModuloCarro_ProveViolaoFactory.proveViolao(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));
    }

    private Banda banda() {
      return ModuloInstrumentos_ProverBandaFactory.proverBanda(ModuloCarro_ProveViolaoFactory.proveViolao(), ModuloCarro_ProveBateriaFactory.proveBateria(), ModuloCarro_ProveGuitarraFactory.proveGuitarra());
    }

    private CarroComConstrutor carroComConstrutor() {
      return ModuloCarro_ProveCarroComConstrutorFactory.proveCarroComConstrutor(ModuloCarro_ProveMotorHybridoFactory.proveMotorHybrido(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));
    }

    private ClasseSendoInjetada classeSendoInjetada() {
      return new ClasseSendoInjetada(new ClasseImplementacaoHiltSimples());
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectFragmentHiltDummyProdutos(
        FragmentHiltDummyProdutos fragmentHiltDummyProdutos) {
    }

    @Override
    public void injectFragmentHiltDummyUsuarios(
        FragmentHiltDummyUsuarios fragmentHiltDummyUsuarios) {
    }

    @Override
    public void injectFragmentHiltDependenciasNomeadas(
        FragmentHiltDependenciasNomeadas fragmentHiltDependenciasNomeadas) {
      injectFragmentHiltDependenciasNomeadas2(fragmentHiltDependenciasNomeadas);
    }

    @Override
    public void injectFragmentHiltInjecao(FragmentHiltInjecao fragmentHiltInjecao) {
      injectFragmentHiltInjecao2(fragmentHiltInjecao);
    }

    @Override
    public void injectFragmentHiltSimples(FragmentHiltSimples fragmentHiltSimples) {
      injectFragmentHiltSimples2(fragmentHiltSimples);
    }

    @CanIgnoreReturnValue
    private FragmentHiltDependenciasNomeadas injectFragmentHiltDependenciasNomeadas2(
        FragmentHiltDependenciasNomeadas instance) {
      FragmentHiltDependenciasNomeadas_MembersInjector.injectMusico(instance, musico());
      FragmentHiltDependenciasNomeadas_MembersInjector.injectBanda(instance, banda());
      return instance;
    }

    @CanIgnoreReturnValue
    private FragmentHiltInjecao injectFragmentHiltInjecao2(FragmentHiltInjecao instance) {
      FragmentHiltInjecao_MembersInjector.injectCarroComConstrutor(instance, carroComConstrutor());
      FragmentHiltInjecao_MembersInjector.injectCarroSemConstrutor(instance, ModuloCarro_ProveCarroSemConstrutorFactory.proveCarroSemConstrutor());
      return instance;
    }

    @CanIgnoreReturnValue
    private FragmentHiltSimples injectFragmentHiltSimples2(FragmentHiltSimples instance) {
      FragmentHiltSimples_MembersInjector.injectClasseSendoInjetada(instance, classeSendoInjetada());
      return instance;
    }
  }

  private static final class ViewCImpl extends ClasseDeAplicacao_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends ClasseDeAplicacao_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<?>, Boolean> getViewModelKeys() {
      return LazyClassKeyMap.<Boolean>of(ImmutableMap.<String, Boolean>of(LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm, ViewModelComposeMvvm_HiltModules.KeyModule.provide(), LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos, ViewModelDomainProdutos_HiltModules.KeyModule.provide(), LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios, ViewModelDomainUsuarios_HiltModules.KeyModule.provide()));
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public void injectScaffoldMVVM(ScaffoldMVVM scaffoldMVVM) {
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios = "net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.viewModel.ViewModelDomainUsuarios";

      static String net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos = "net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.viewModel.ViewModelDomainProdutos";

      static String net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm = "net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.viewmodel.ViewModelComposeMvvm";

      @KeepFieldType
      ViewModelDomainUsuarios net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios2;

      @KeepFieldType
      ViewModelDomainProdutos net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos2;

      @KeepFieldType
      ViewModelComposeMvvm net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm2;
    }
  }

  private static final class ViewModelCImpl extends ClasseDeAplicacao_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ViewModelComposeMvvm> viewModelComposeMvvmProvider;

    private Provider<ViewModelDomainProdutos> viewModelDomainProdutosProvider;

    private Provider<ViewModelDomainUsuarios> viewModelDomainUsuariosProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private InterfaceComposeDummyApi interfaceComposeDummyApi() {
      return ModuloApi_ProverInterfaceApiDummyUsuariosComposeFactory.proverInterfaceApiDummyUsuariosCompose(ModuloApi_ProverRetrofitDummyFactory.proverRetrofitDummy());
    }

    private RepositoryComposeMvvm repositoryComposeMvvm() {
      return ModuloApi_ProverRepositoryApiDummyUsuariosComposeFactory.proverRepositoryApiDummyUsuariosCompose(interfaceComposeDummyApi());
    }

    private InterfaceDomainDummyProdutos interfaceDomainDummyProdutos() {
      return ModuloApi_ProverInterfaceApiDummyProdutosFactory.proverInterfaceApiDummyProdutos(ModuloApi_ProverRetrofitDummyFactory.proverRetrofitDummy());
    }

    private RepositorioDummyDomain repositorioDummyDomain() {
      return ModuloApi_ProverInterfaceRepositoryDomainApiDummyProdutosFactory.proverInterfaceRepositoryDomainApiDummyProdutos(interfaceDomainDummyProdutos());
    }

    private GetUseCaseDomainDummyProdutos getUseCaseDomainDummyProdutos() {
      return ModuloApi_ProverUseCaseDomainApiDummyProdutosFactory.proverUseCaseDomainApiDummyProdutos(repositorioDummyDomain());
    }

    private InterfaceDomainDummyUsuarios interfaceDomainDummyUsuarios() {
      return ModuloApi_ProverInterfaceApiDummyUsuariosFactory.proverInterfaceApiDummyUsuarios(ModuloApi_ProverRetrofitDummyFactory.proverRetrofitDummy());
    }

    private RepositorioDummyUsuarios repositorioDummyUsuarios() {
      return ModuloApi_ProverInterfaceRepositoryDomainApiDummy_UsuariosFactory.proverInterfaceRepositoryDomainApiDummy_Usuarios(interfaceDomainDummyUsuarios());
    }

    private GetUseCaseDomainApiDummy_Usuarios getUseCaseDomainApiDummy_Usuarios() {
      return ModuloApi_ProverUseCaseDomainApiDummyUsuariosFactory.proverUseCaseDomainApiDummyUsuarios(repositorioDummyUsuarios());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.viewModelComposeMvvmProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.viewModelDomainProdutosProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.viewModelDomainUsuariosProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
    }

    @Override
    public Map<Class<?>, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return LazyClassKeyMap.<javax.inject.Provider<ViewModel>>of(ImmutableMap.<String, javax.inject.Provider<ViewModel>>of(LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm, ((Provider) viewModelComposeMvvmProvider), LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos, ((Provider) viewModelDomainProdutosProvider), LazyClassKeyProvider.net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios, ((Provider) viewModelDomainUsuariosProvider)));
    }

    @Override
    public Map<Class<?>, Object> getHiltViewModelAssistedMap() {
      return ImmutableMap.<Class<?>, Object>of();
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios = "net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.viewModel.ViewModelDomainUsuarios";

      static String net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos = "net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.viewModel.ViewModelDomainProdutos";

      static String net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm = "net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.viewmodel.ViewModelComposeMvvm";

      @KeepFieldType
      ViewModelDomainUsuarios net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyUsuarios_viewModel_ViewModelDomainUsuarios2;

      @KeepFieldType
      ViewModelDomainProdutos net_developermaster_kotlincanivetesuico_ui_arquitetura_hilt_hiltClearDomainDummyProdutos_viewModel_ViewModelDomainProdutos2;

      @KeepFieldType
      ViewModelComposeMvvm net_developermaster_kotlincanivetesuico_ui_compose_scaffoldMVVM_viewmodel_ViewModelComposeMvvm2;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // net.developermaster.kotlincanivetesuico.ui.compose.scaffoldMVVM.viewmodel.ViewModelComposeMvvm 
          return (T) new ViewModelComposeMvvm(viewModelCImpl.repositoryComposeMvvm());

          case 1: // net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyProdutos.viewModel.ViewModelDomainProdutos 
          return (T) new ViewModelDomainProdutos(viewModelCImpl.getUseCaseDomainDummyProdutos());

          case 2: // net.developermaster.kotlincanivetesuico.ui.arquitetura.hilt.hiltClearDomainDummyUsuarios.viewModel.ViewModelDomainUsuarios 
          return (T) new ViewModelDomainUsuarios(viewModelCImpl.getUseCaseDomainApiDummy_Usuarios());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends ClasseDeAplicacao_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends ClasseDeAplicacao_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends ClasseDeAplicacao_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;

    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectClasseDeAplicacao(ClasseDeAplicacao classeDeAplicacao) {
    }
  }
}
